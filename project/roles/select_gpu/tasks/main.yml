- name: Load GPU matrix
  include_vars: "{{ playbook_dir }}/vars/gpu_matrix.yml"

# Cài pciutils để có lệnh lspci (an toàn chạy sớm, không phụ thuộc driver)
- name: Ensure pciutils present (Debian/Ubuntu)
  apt:
    name: pciutils
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Ensure pciutils present (RHEL family)
  dnf:
    name: pciutils
    state: present
  when: ansible_os_family == "RedHat"

- name: Query NVIDIA GPUs via lspci (VGA/3D only, no driver needed)
  shell: set -o pipefail && lspci -nn | egrep -i 'NVIDIA.*(VGA|3D controller)' || true
  args:
    executable: /bin/bash
  register: lspci_out
  changed_when: false

# (2) Chuẩn hoá output
- name: Normalize lspci output
  set_fact:
    _gpu_raw: "{{ (lspci_out.stdout | default('')) | replace('\r','') | regex_replace('\\s+\\Z','') }}"

# (3) Khởi tạo facts (không dùng splitlines/select length)
- name: Init facts for GPU parsing
  set_fact:
    _gpu_lines: "{{ _gpu_raw | split('\n') | map('trim') | reject('equalto','') | list }}"
    gpu_names: []
    gpu_names_joined: ""
    current_driver_version: ""

# (4) Trích tên GPU an toàn:
# - Ưu tiên text trong [ ... ] (ví dụ [GeForce RTX 2080]); nếu không có, fallback lấy phần sau 'NVIDIA Corporation ' đến trước '(' hoặc '['
# - Không dùng group '\1' để tránh AttributeError khi no-match
- name: Extract clean GPU names from lspci
  set_fact:
    gpu_names: >-
      {{ gpu_names + [ (
          # lấy phần trong ngoặc vuông (nếu có), sau đó bỏ dấu ngoặc
          (item | regex_search('\\[[^\\]]+\\]') | default('', true) | regex_replace('^\\[|\\]$',''))
          # fallback: lấy phần sau 'NVIDIA Corporation ' đến trước '(' hoặc '[' (nếu có)
          | default( (item | regex_replace('^.*NVIDIA\\s+Corporation\\s+([^\\(\\[]+).*$','\\1') ), true )
          # fallback cuối: nguyên dòng
          | default(item, true)
          | trim
        ) ] }}
  loop: "{{ _gpu_lines }}"

- name: Join gpu_names for regex matching
  set_fact:
    gpu_names_joined: "{{ gpu_names | join(' || ') }}"

# (MỚI) Gom các rule match vào list
- name: Collect matching architecture rules
  set_fact:
    _matched_arches: "{{ (_matched_arches | default([])) + [item] }}"
  loop: "{{ architectures }}"
  when: item.match_any | map('regex_search', gpu_names_joined) | select('string') | list | length > 0

# (MỚI) Dùng rule đầu tiên
- name: Use first matched rule
  set_fact:
    gpu_arch_rule: "{{ (_matched_arches | default([]) | first) | default({}) }}"

# (MỚI) Báo lỗi nếu không match rule nào
- name: Fail if no matrix rule matched
  assert:
    that:
      - _matched_arches is defined
      - (_matched_arches | length) > 0
    fail_msg: "Không match được GPU với matrix (lspci): {{ gpu_names }}"


- name: Decide toolkit major
  set_fact:
    target_toolkit_major: >-
      {{ gpu_arch_rule.recommended_toolkit_major
         if (gpu_arch_rule.toolkit_max_major is not defined)
         else ( (gpu_arch_rule.recommended_toolkit_major | default(99)) | min(gpu_arch_rule.toolkit_max_major) )
      }}

- name: Required driver branch (min)
  set_fact:
    min_driver_branch_required: "{{ driver_min_by_toolkit[target_toolkit_major | string] }}"

- name: Choose driver branch (override if desired)
  set_fact:
    chosen_driver_branch: >-
      {{ (desired_driver_branch | default('') | length > 0)
         | ternary(desired_driver_branch | int, min_driver_branch_required | int) }}

- name: Compute enable_mig
  set_fact:
    enable_mig: >-
      {{ (enable_mig | default(false))
         and (
           (gpu_arch_rule.mig_capable | default(false))
           or (gpu_arch_rule.mig_capable_models is defined and
               (gpu_names_joined is search(gpu_arch_rule.mig_capable_models | join('|'))))
         )
      }}

# - name: Load GPU matrix
#   include_vars: "{{ playbook_dir }}/vars/gpu_matrix.yml"

# - name: Query GPU names & driver (if present)
#   command: nvidia-smi --query-gpu=name,driver_version --format=csv,noheader
#   register: smi
#   changed_when: false
#   failed_when: false

# - set_fact:
#     gpu_names: "{{ (smi.stdout | default('')).splitlines() | map('regex_replace', ',.*$', '') | list }}"
#     gpu_names_joined: "{{ gpu_names | join(' || ') }}"
#     current_driver_version: >-
#       {{ (smi.stdout_lines | default([]) | first | default('') | regex_search(',\s*([0-9.]+)$','\1')) | default('') }}

# - name: Pick architecture rule by GPU name
#   set_fact:
#     gpu_arch_rule: "{{ item }}"
#   loop: "{{ architectures }}"
#   when: item.match_any | map('regex_search', gpu_names_joined) | select('string') | list | length > 0
#   register: arch_pick

# - name: Use first matched rule
#   set_fact:
#     gpu_arch_rule: "{{ (arch_pick.results | selectattr('skipped','!=',true) | map(attribute='item') | list)[0] | default({}) }}"

# - name: Fail if no matrix rule matched
#   assert:
#     that: "gpu_arch_rule | length > 0"
#     fail_msg: "Không match được GPU với matrix: {{ gpu_names }}"

# - name: Decide toolkit major
#   set_fact:
#     target_toolkit_major: >-
#       {{ gpu_arch_rule.recommended_toolkit_major
#          if (gpu_arch_rule.toolkit_max_major is not defined)
#          else ( (gpu_arch_rule.recommended_toolkit_major | default(99)) | min(gpu_arch_rule.toolkit_max_major) )
#       }}

# - name: Required driver branch (min)
#   set_fact:
#     min_driver_branch_required: "{{ driver_min_by_toolkit[target_toolkit_major | string] }}"

# - name: Choose driver branch (override if desired)
#   set_fact:
#     chosen_driver_branch: >-
#       {{ (desired_driver_branch | default('') | length > 0)
#          | ternary(desired_driver_branch | int, min_driver_branch_required | int) }}

# - name: Compute enable_mig
#   set_fact:
#     enable_mig: >-
#       {{ (enable_mig | default(false))
#          and (
#            (gpu_arch_rule.mig_capable | default(false))
#            or (gpu_arch_rule.mig_capable_models is defined and
#                (gpu_names_joined is search(gpu_arch_rule.mig_capable_models | join('|'))))
#          )
#       }}
